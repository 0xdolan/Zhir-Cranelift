@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="row justify-content-center">
    <ul class="nav nav-pills">
        @foreach (var period in IndexModel.Periods)
        {
            <li class="nav-item">
                <a asp-page="Index" asp-route-days="@period.Days" class="nav-link @(Model.SelectedPeriod.Days == period.Days ? "active" : "")">@period.Name</a>
            </li>
        }
    </ul>
</div>

    <div class="row justify-content-center">
        <div class="card col-md-5 m-md-2">
            <div class="card-body">
                <h3 class="card-title text-center" id="all-users-number">?</h3>
                <p class="card-text text-center">Users (<span id="verified-users-number"></span> Verified, <span id="active-users-number"></span> Active in @Model.SelectedPeriod.Name.ToLower())</p>
            </div>
        </div>

        <div class="card col-md-5 m-md-2">
            <div class="card-body">
                <h3 class="card-title text-center"><span id="processing-time-number">?</span><span> Seconds</span></h3>
                <p class="card-text text-center">Processing time per page (@Model.SelectedPeriod.Name.ToLower())</p>
            </div>
        </div>

        <div class="card col-md-5 m-md-2">
            <div class="card-body">
                <h3 class="card-title text-center" id="new-users-number">?</h3>
                <p class="card-text text-center">New Users in @Model.SelectedPeriod.Name.ToLower()</p>
            </div>
        </div>

        <div class="card col-md-5 m-md-2">
            <div class="p-3 card-body">
                <h3 class="card-title text-center" id="total-jobs-number">?</h3>
                <p class="card-text text-center">Jobs (<span id="success-rate-number"></span>% success) (@Model.SelectedPeriod.Name.ToLower())</p>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <canvas id="jobs-chart"></canvas>
        </div>

        <div class="col-md-6">
            <canvas id="users-chart"></canvas>
        </div>
    </div>

    <h4 class="mt-4">Top active users @Model.SelectedPeriod.Name.ToLower() by number of pages</h4>

    <table id="main-table" class="table table-striped table-bordered" style="width:100%">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">Company</th>
                <th scope="col">Number of jobs</th>
                <th scope="col">Number of pages</th>
                <th scope="col">Remaining Balance</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.ActiveUsersByPageCount.Count; i++)
            {
                var user = Model.ActiveUsersByPageCount[i];

                <tr>
                    <th scope="row">@(i + 1)</th>
                    <td><a target="_blank" asp-page="./Users/Details" asp-route-id="@user.Id">@user.Name</a></td>
                    <td>@user.CompanyName</td>
                    <td>@user.NumberOfJobs</td>
                    <td>@user.NumberOfPages</td>
                    <td>@user.Balance</td>
                </tr>
            }
        </tbody>
    </table>

    @section Scripts {
        <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"></script>
        <script>
            async function getJson(url) {
                var response = await fetch(url);
                return await response.json();
            }

            function setElementText(id, text) {
                let element = document.getElementById(id);
                element.textContent = text;
            }

            function createChart(ctx, title, type, data, stacked) {
                return new Chart(ctx, {
                    type: type,
                    data: data,
                    options: {
                        title: {
                            display: true,
                            text: title
                        },
                        tooltips: {
                            mode: 'index',
                            intersect: false
                        },
                        responsive: true,
                        scales: {
                            xAxes: [{
                                stacked: stacked,
                            }],
                            yAxes: [{
                                stacked: stacked
                            }]
                        }
                    }
                });
            }
        </script>
        <script>
        window.onload = async function () {
            var stats = await getJson('@Url.Action("GetStats", "Charts", new { days = Model.SelectedPeriod.Days })');
            setElementText('all-users-number', stats.allUsers);
            setElementText('active-users-number', stats.activeUsers);
            setElementText('verified-users-number', stats.verifiedUsers);
            setElementText('new-users-number', stats.newUsers);

            let successRate = Math.round(((stats.completedJobs / stats.totalJobs) * 10) * 100) / 10;

            setElementText('total-jobs-number', stats.totalJobs);
            setElementText('success-rate-number', successRate);

            setElementText('processing-time-number', Math.round(stats.averageProcessingTimePerPage * 100) / 100);

            var jobs = await getJson('@Url.Action("GetDailyJobs", "Charts", new { days = Model.SelectedPeriod.Days })');
            var jobsCtx = document.getElementById('jobs-chart').getContext('2d');
            createChart(jobsCtx, 'Jobs executed @Model.SelectedPeriod.Name.ToLower()', 'bar', jobs, true);

            var users = await getJson('@Url.Action("GetDailyUsers", "Charts", new { days = Model.SelectedPeriod.Days })');
            var usersCtx = document.getElementById('users-chart').getContext('2d');
            createChart(usersCtx, 'Daily user activity in @Model.SelectedPeriod.Name.ToLower()', 'bar', users, false);
        };
        </script>
    }
